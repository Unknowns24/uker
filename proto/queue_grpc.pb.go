// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.2
// source: src/proto/queue.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueueServiceClient is the client API for QueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueServiceClient interface {
	CreateMessage(ctx context.Context, in *CreateMessageReq, opts ...grpc.CallOption) (*CreateMessageRes, error)
	MessageExist(ctx context.Context, in *MessageExistReq, opts ...grpc.CallOption) (*MessageExistRes, error)
	UpdateMessageState(ctx context.Context, in *UpdateMessageStateReq, opts ...grpc.CallOption) (*UpdateMessageStateRes, error)
}

type queueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueServiceClient(cc grpc.ClientConnInterface) QueueServiceClient {
	return &queueServiceClient{cc}
}

func (c *queueServiceClient) CreateMessage(ctx context.Context, in *CreateMessageReq, opts ...grpc.CallOption) (*CreateMessageRes, error) {
	out := new(CreateMessageRes)
	err := c.cc.Invoke(ctx, "/grpc.QueueService/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) MessageExist(ctx context.Context, in *MessageExistReq, opts ...grpc.CallOption) (*MessageExistRes, error) {
	out := new(MessageExistRes)
	err := c.cc.Invoke(ctx, "/grpc.QueueService/MessageExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) UpdateMessageState(ctx context.Context, in *UpdateMessageStateReq, opts ...grpc.CallOption) (*UpdateMessageStateRes, error) {
	out := new(UpdateMessageStateRes)
	err := c.cc.Invoke(ctx, "/grpc.QueueService/UpdateMessageState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServiceServer is the server API for QueueService service.
// All implementations must embed UnimplementedQueueServiceServer
// for forward compatibility
type QueueServiceServer interface {
	CreateMessage(context.Context, *CreateMessageReq) (*CreateMessageRes, error)
	MessageExist(context.Context, *MessageExistReq) (*MessageExistRes, error)
	UpdateMessageState(context.Context, *UpdateMessageStateReq) (*UpdateMessageStateRes, error)
	mustEmbedUnimplementedQueueServiceServer()
}

// UnimplementedQueueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServiceServer struct {
}

func (UnimplementedQueueServiceServer) CreateMessage(context.Context, *CreateMessageReq) (*CreateMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedQueueServiceServer) MessageExist(context.Context, *MessageExistReq) (*MessageExistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageExist not implemented")
}
func (UnimplementedQueueServiceServer) UpdateMessageState(context.Context, *UpdateMessageStateReq) (*UpdateMessageStateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessageState not implemented")
}
func (UnimplementedQueueServiceServer) mustEmbedUnimplementedQueueServiceServer() {}

// UnsafeQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServiceServer will
// result in compilation errors.
type UnsafeQueueServiceServer interface {
	mustEmbedUnimplementedQueueServiceServer()
}

func RegisterQueueServiceServer(s grpc.ServiceRegistrar, srv QueueServiceServer) {
	s.RegisterService(&QueueService_ServiceDesc, srv)
}

func _QueueService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.QueueService/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).CreateMessage(ctx, req.(*CreateMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_MessageExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).MessageExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.QueueService/MessageExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).MessageExist(ctx, req.(*MessageExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_UpdateMessageState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).UpdateMessageState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.QueueService/UpdateMessageState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).UpdateMessageState(ctx, req.(*UpdateMessageStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueService_ServiceDesc is the grpc.ServiceDesc for QueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.QueueService",
	HandlerType: (*QueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _QueueService_CreateMessage_Handler,
		},
		{
			MethodName: "MessageExist",
			Handler:    _QueueService_MessageExist_Handler,
		},
		{
			MethodName: "UpdateMessageState",
			Handler:    _QueueService_UpdateMessageState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/queue.proto",
}
